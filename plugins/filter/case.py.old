#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright: (c) 2025, Robert Pufky <rpufky@gmail.com>
# GNU Affero General Public License v3 (see COPYING or https://www.gnu.org/licenses/agpl-3.0.txt)

from __future__ import annotations

from collections.abc import Mapping
from ansible.errors import AnsibleError, AnsibleFilterError, AnsibleFilterTypeError

def pascal_to_snake(name, prepend=None, append=None):
    '''
    PascalCaseString to snake_case_string.

    For each character if it is upper, add _ and lowercase, strip starting _.

    Args:
      name (str): PascalCase string to transform to snake_case.
      prepend (str): String to prepend to transformed string.
      append (str): String to append to transformed string.

    Returns:
      str: transformed name string.
    '''
    return f"{prepend or ''}{''.join(['_'+c.lower() if c.isupper() else c for c in name]).lstrip('_')}{append or ''}"

def snake_to_pascal(name, prepend=None, append=None):
    '''
    snake_case_string to PascalCaseString.

    Split on _, title case each word and concatenate.

    Args:
      name (str): snake_case string to transform to PascalCase.
      prepend (str): String to prepend to transformed string.
      append (str): String to append to transformed string.

    Returns:
      str: transformed name string.
    '''
    return f"{prepend or ''}{''.join(word.title() for word in name.split('_'))}{append or ''}"

def pascal_to_snake_filter(pascal, prepend=None, append=None):
    '''
    Ansible filter that transforms datatypes from PascalCase to snake_case.

    Split on _, title case each word and concatenate.

    Args:
      pascal (str,list,dict): PascalCase data to transform to snake_case.
      prepend (str): String to prepend to transformed string.
      append (str): String to append to transformed string.

    Raises:
        AnsibleFilterTypeError: input filter data is invalid.

    Returns:
      str,list,dict: original datatype with snake_case transformation applied.
    '''
    if isinstance(pascal, str):
        return pascal_to_snake(pascal, prepend, append)
    elif isinstance(pascal, Mapping):
        snake = {}
        for k, v in pascal.items():
            if isinstance(v, dict):
                v = pascal_to_snake_filter(v, prepend, append)
            snake[pascal_to_snake_filter(k, prepend, append)] = v
        return snake
    elif isinstance(pascal, list):
        snake = []
        for i in pascal:
            snake.append(pascal_to_snake_filter(i, prepend, append))
        return snake
    raise AnsibleFilterTypeError("pascal2snake requires a string, dict, or list; got %s instead." % type(camel))

# TODO(role): add 'recurse' bool (true) option to enable recursion on data
#     structures, add 'keys' bool (true) option to enable case change on keys
#     or primary datastructures values, add 'values' bool (false) option to
#     enable case change on values or secondary datastructures values, add
#     'lstrip' str option to enable stripping of beginning strings after
#     transform, before prepend. add 'rstrip' str option to enable stripping of
#     ending strings after transform, before prepend.
def snake_to_pascal_filter(snake, prepend=None, append=None):
    '''
    Ansible filter that transforms datatypes from snake_case to PascalCase.

    Split on _, title case each word and concatenate.

    Args:
      snake (str,list,dict): snake_case data to transform to PascalCase.
      prepend (str): String to prepend to transformed string.
      append (str): String to append to transformed string.

    Raises:
        AnsibleFilterTypeError: input filter data is invalid.

    Returns:
      str,list,dict: original datatype with PascalCase transformation applied.
    '''
    if isinstance(snake, str):
        return snake_to_pascal(snake, prepend, append)
    elif isinstance(snake, Mapping):
        pascal = {}
        for k, v in snake.items():
            if isinstance(v, dict):
                v = snake_to_pascal_filter(v, prepend, append)
            pascal[snake_to_pascal_filter(k, prepend, append)] = v
        return pascal
    elif isinstance(snake, list):
        pascal = []
        for i in snake:
            pascal.append(snake_to_pascal_filter(i, prepend, append))
        return pascal
    raise AnsibleFilterTypeError("snake2pascal requires a string, dict, or list; got %s instead." % type(snake))

class FilterModule(object):
    """ ansible case filters """

    def filters(self):
        return {
            'pascal2snake': pascal_to_snake_filter,
            'snake2pascal': snake_to_pascal_filter,
        }
