---
# yamllint disable rule:line-length
DOCUMENTATION:
  name: 'pascal2snake'
  author: 'r_pufky'
  version_added: '2.18.0'
  short_description: 'Convert PascalCase to snake_case'
  positional: _input, prepend, append
  description:
    - Transforms strings from PascalCase to snake_case; optionally prepending
       or appending strings to the transformed value.
    - For dicts all keys are recursively transformed.
    - For lists each element is recursively transformed using the rules above.
  options:
    _input:
      description:
        - Input data structure to transform.
      type: [dict, list, str]
      required: true
    prepend:
      description: String to prepend to the transformed data.
      type: str
      default: ''
    value_name:
      description: String to append to the transformed data.
      type: str
      default: ''
  seealso:
    - name: Pascal Case format
      description: Detailed explanation of PascalCase format.
      link: https://en.wikipedia.org/wiki/Camel_case
    - name: Snake Case format
      description: Detailed explanation of snake_case format.
      link: https://en.wikipedia.org/wiki/Snake_case
    - plugin_type: filter
      plugin: r_pufky.srv.pascal2snake

EXAMPLES: |
  # dict => {
  #   'StringTest': 'StringTestString',
  #   'OtherDict': {
  #     'OtherDictKey': 'TestKey',
  #     'OtherDictKey2': 'TestKey2'
  #   },
  #   'ListKey': ['TestKeyList', 'test_key_list2', 'testkeylist3']
  # }
  # transform => {
  #   'string_test': 'StringTestString',
  #   'other_dict': {
  #     'other_dict_key': 'TestKey',
  #     'other_dict_key2': 'TestKey2'
  #   },
  #   'list_key': ['TestKeyList', 'test_key_list2', 'testkeylist3']
  # }
  transform: '{{ dict | r_pufky.srv.pascal2snake }}'

  # list => [
  #   "StringTest",
  #   ["InnerListTest", "InterListTest2"],
  #   {"OtherDictKey": "TestKey", "OtherDictKey2": "TestKey2"}
  # ]
  # transform => [
  #   'string_test',
  #   ['inner_list_test', 'inter_list_test2'],
  #   {'other_dict_key': 'TestKey', 'other_dict_key2': 'TestKey2'}
  # ]
  transform: '{{ list | r_pufky.srv.pascal2snake }}'

  # str => "StringTest"
  # transform => 'string_test'
  transform: '{{ str | r_pufky.srv.pascal2snake }}'
  # prepend => 'role_string_test'
  transform: '{{ str | r_pufky.srv.pascal2snake(prepend=("role_")) }}'
  # append => 'string_test_app'
  transform: '{{ str | r_pufky.srv.pascal2snake(append=("_app")) }}'
  # both => 'role_string_test_app'
  transform: '{{ str | r_pufky.srv.pascal2snake(prepent("role_", append=("_app"))) }}'

RETURN:
  _value:
    description: Original datatype transformed from PascalCase to snake_case.
    type: [dict, list, str]
