---
###############################################################################
# ACME (Let's Encrypt) Certificates
###############################################################################
# Automatic, free, generation of trusted SSL domain certificates.
#
# DNSRoboCert is used to automatically request and update certificates.
#
# On major upgrades pip packages will change; move .local and install fresh.
# Will typically recieve the following error:
#
#   python3 -m pip upgrade failed: no module named pip
#
# TODO(pve 8+): Evaluate switch to ACME certificates built into PVE when
#               wildcard support is added. See details in pve-acme.yml.
#
# Args:
#   acme_default_packages: list of packages for ACME install.
#
# Reference:
# * https://github.com/adferrand/dnsrobocert
# * https://dnsrobocert.readthedocs.io/en/latest/user_guide.html#installation
# * https://datatracker.ietf.org/doc/rfc8738/
# * https://maulwuff.de/research/ssl-debugging.html#hdr3.2

- name: 'Set config directory'
  ansible.builtin.file:
    path: '{{ acme_base }}/dnsrobocert'
    owner: '{{ acme_user }}'
    group: '{{ acme_group }}'
    mode: '0750'
    state: 'directory'

- name: 'Install dependencies'
  ansible.builtin.apt:
    name: '{{ acme_default_packages }}'
    state: 'latest'
    update_cache: true

- name: 'Check environment path'
  ansible.builtin.command: 'grep "{{ acme_base }}/.local/bin" "{{ acme_base }}/.bashrc"'
  register: _acme_environment
  failed_when: false
  changed_when: false
  args:
    chdir: '{{ acme_base }}'
  become: true
  become_user: '{{ acme_user }}'
  vars:
    ansible_ssh_pipelining: true

- name: 'Set environment path'
  ansible.builtin.command: 'python3 -m pipx ensurepath'
  args:
    chdir: '{{ acme_base }}'
  become: true
  become_user: '{{ acme_user }}'
  vars:
    ansible_ssh_pipelining: true
  when: _acme_environment.rc != 0

- name: 'Check dnsrobocert'
  ansible.builtin.shell: 'set -o pipefail && python3 -m pipx list | grep dnsrobocert'
  register: _acme_dnsrobocert
  failed_when: false
  changed_when: false
  args:
    executable: '/bin/bash'
    chdir: '{{ acme_base }}'
  become: true
  become_user: '{{ acme_user }}'
  vars:
    ansible_ssh_pipelining: true

- name: 'Install dnsrobocert'
  ansible.builtin.command: 'python3 -m pipx install dnsrobocert'
  args:
    chdir: '{{ acme_base }}'
  become: true
  become_user: '{{ acme_user }}'
  vars:
    ansible_ssh_pipelining: true
  when: _acme_dnsrobocert.rc != 0

- name: 'Update dnsrobocert' # noqa no-changed-when always upgrade
  ansible.builtin.command: 'python3 -m pipx upgrade dnsrobocert'
  args:
    chdir: '{{ acme_base }}'
  become: true
  become_user: '{{ acme_user }}'
  vars:
    ansible_ssh_pipelining: true

# Secure this file as it gives full control over your DNS domain. Changing or
# removing domains in this file will result in a request for new certificates
# (or deletion of existing ones) respectively on next renewal check.
- name: 'Set dnsrobocert config'
  ansible.builtin.template:
    src: 'config.yml.j2'
    dest: '{{ acme_base }}/dnsrobocert/config.yml'
    owner: '{{ acme_user }}'
    group: '{{ acme_group }}'
    mode: '0400'
  notify: restart dnsrobocert

- name: 'Set dnsrobocert systemd environment'
  ansible.builtin.template:
    src: 'acme.env.j2'
    dest: '{{ acme_base }}/.acme.env'
    owner: '{{ acme_user }}'
    group: '{{ acme_group }}'
    mode: '0644'

- name: 'Set /etc/systemd/system/wait_for_acme_mount.target'
  ansible.builtin.template:
    src: 'wait_for_acme_mount.target.j2'
    dest: '/etc/systemd/system/wait_for_acme_mount.target'
    owner: 'root'
    group: 'root'
    mode: '0755'
  notify: 'reload systemd'

- name: 'Set /etc/systemd/system/dnsrobocert.service'
  ansible.builtin.template:
    src: 'dnsrobocert.service.j2'
    dest: '/etc/systemd/system/dnsrobocert.service'
    owner: 'root'
    group: 'root'
    mode: '0755'
  notify:
    - 'reload systemd'
    - 'restart dnsrobocert'
